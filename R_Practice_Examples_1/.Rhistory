getwd()
txt1 <= ''txt1 <- "Start R programming with R-LOVE book."
txt1
txt1 <- "Start R programming with R-LOVE book."
txt1
txt1 <- "Start R programming with R-LOVE book."
txt1
strsplit(txt1, ' ')
install.packages(“KoNLP”)
install.packages('KoNLP')
library(KoNLP) # Python에 비유하면... import KoNLP
txt2 <- "R맹이 책으로 R 프로그래밍을 시작하세요~!"
strsplit(txt2, ' ')
strsplit(txt2, ' ')
extractNoun(txt2)
extractNoun(txt2)
# install.packages('KoNLP')
library('KoNLP') # Python에 비유하면... import KoNLP
library('KoNLP')
txt2 <- "R맹이 책으로 R 프로그래밍을 시작하세요~!"
txt2
strsplit(txt2, ' ')
extractNoun(txt2)
wd
getwd()
setwd('R_Practice_Examples_1')
library(devtools)
library(ggmap)
library(dplyr)
loc <- read.csv('지역별장애인도서관정보.csv', header=T)
head(loc)
kor <- get_googlemap('seoul', zoom=11, maptype='roadmap')
googleAPIkey <- 'AIzaSyDGzDquzH9g8yPOh811mG4DFpOJ17Pz7pA'
register_google(googleAPIkey)
kor <- get_googlemap('seoul', zoom=11, maptype='roadmap')
kor <- ggmap(kor) + geom_point(data = loc, aes(x = LON, y = LAT), size = 5, alpha = 0.7)
kor + geom_text(data = loc, aes(x = LON, y = LAT+0.01, label = 자치구명), size = 3)
kor <- ggmap(kor) + geom_point(data = loc, aes(x = LON, y = LAT), color = red, size = 5, alpha = 0.7)
kor <- get_googlemap('seoul', zoom=11, maptype='roadmap')
kor_map <- ggmap(kor) + geom_point(data = loc, aes(x = LON, y = LAT), color = 'red', size = 5, alpha = 0.7)
kor_map + geom_text(data = loc, aes(x = LON, y = LAT+0.01, label = 자치구명), size = 3, color = 'red')
install.packages('grid')
install.packages('grid')
install.packages("grid")
install.packages("grid")
loc2 <- substr(loc$주차장명, start = -2, end = -2)
loc2 <- str_sub(loc$주차장명, start = -2, end = -2)
library(ggmap)
library(devtools)
library(dplyr)
googleAPIkey <- 'AIzaSyDGzDquzH9g8yPOh811mG4DFpOJ17Pz7pA'
register_google(googleAPIkey)
loc <- read.csv('서울_강동구_공영주차장_위경도.csv', header = T)
kd <- get_map('Amsa-dong', zoom = 13, maptype = 'roadmap')
kdmap <- ggmap(kd) + geom_point(data=loc, aes(x=LON, y=LAT), size = 3, alpha = 0.7, color = 'red')
kdmap + geom_text(data=loc, aes(x=LON, y=LAT+0.001, label = 주차장명), size=3)
loc2 <- substr(loc$주차장명, start = -2, end = -2)
loc2 <- str_sub(loc$주차장명, start = -2, end = -2)
loc2 <- substr(loc$주차장명, start = -2, end = -2)
loc2 <- str_sub(loc$주차장명, start = -2, end = -2)
library(stringr)
loc2 <- str_sub(loc$주차장명, start = -2, end = -2)
colors <- c()
for (i in 1:length(loc2)) {
if (loc2[i] == '구') {
colors <- c(colors, 'red')
} else {
colors <- c(colors, 'blue')
}
}
kd <- get_map('Amsa-dong', zoom = 13, maptype = 'roadmap')
kdmap <- ggmap(kd) + geom_point(data=loc, aes(x=LON, y=LAT), size = 3, alpha = 0.7, color = colors)
kdmap + geom_text(data=loc, aes(x=LON, y=LAT+0.001, label = 주차장명), size=3)
# install.packages('grid')
library(grid)
pop <- read.csv('지역별인구현황_2014_4월기준.csv', header = T)
pop
lon <- pop$LON
lat <- pop$LAT
data <- pop$총인구수
data <- pop$총인구수
df <- data.frame(lon, lat, data)
map1 <- get_googlemap('Jeonju', zoom = 7, maptype = 'roadmap')
map1 <- ggmap(map1)
map1 <- geom_point(aes(x = lon, y = lat, colour = data, size = data), data = df)
map1 <- geom_point(aes(x = lon, y = lat, colour = data, size = data), data = df)
pop <- read.csv('지역별인구현황_2014_4월기준.csv', header = T)
lon <- pop$LON
lat <- pop$LAT
data <- pop$총인구수
df <- data.frame(lon, lat, data)
map1 <- get_googlemap('Jeonju', zoom = 7, maptype = 'roadmap')
map1 <- ggmap(map1)
map1 + geom_point(aes(x = lon, y = lat, colour = data, size = data), data = df)
gc <- geocode(enc2utf8('서울'))
gc
as.numeric(gc)
cen <- as.numeric(gc)
map <- get_googlemap(center = cen)
ggmap(map)
ggmap(map)
ggmap(map)
gc <- geocode(enc2utf8('충청북도 단양군'))
cen <- as.numeric(gc)
map <- get_googlemap(center = cen, maptype = 'roadmap', marker = gc)
ggmap(map, extent = 'device')
library(ggplot2)
names <- c('1. 도담삼봉/석문',
'2. 구담/옥순봉',
'3. 사인암',
'4. 하선암',
'5. 중선암',
'6. 상선암')
names
addr <- c('충청북도 단양군 매포읍 삼봉로 644-33', '충청북도 단양군 단성면 선암계곡로 1337')
gc <- geocode(enc2utf8(addr))
gc
df <- data.frame(names = names, loc = gc$lon, lat = gc$lat)
df
names <- c('1. 도담삼봉/석문',
'2. 구담/옥순봉')
addr <- c('충청북도 단양군 매포읍 삼봉로 644-33', '충청북도 단양군 단성면 선암계곡로 1337')
gc <- geocode(enc2utf8(addr))
df <- data.frame(names = names, loc = gc$lon, lat = gc$lat)
cen <- c(mean(df$lon), mean(df$lat))
df$lon
df
df.lon
df$loc
df <- data.frame(names = names, lon = gc$lon, lat = gc$lat)
cen <- c(mean(df$lon), mean(df$lat))
map <- get_googlemap(center = cen, maptype = 'roadmap', zoom = 11, marker = gc)
ggmap(map) + geom_text(data = df, aes(x=lon, y=lat), size=5, label=df$name)
df <- head(quakes, 100)
cen <- c(mean(df$long), mean(df$lat))
cen
gc <- data.frame(lon = df$long, lat = df$lat)
gc$lon <- ifelse(gc$lon > 180, -(360-gc$lon), gc$lon)
gc
map <- get_googlemap(center = cen, scale = 1, maptype = 'roadmap', zoom = 4, marker = gc)
ggmap(map)
---
title: "test"
author: "yechan kim"
date: '2019 9 30 '
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
* yechan kim *
** Hello **
# Nice to meet you :)
~~ cancle... ~~
' 음영 '
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
summary(cars)
ggmap(map, fullpage = T) + geom_point(data=df, aes(x=lon, y=lat, size=mag), alpha=0.5)
df
ggmap(map, fullpage = T) + geom_point(data=df, aes(x=long, y=lat, size=mag), alpha=0.5)
mag
map <- get_googlemap(center = cen, scale = 1, maptype = 'roadmap', zoom = 5, marker = gc)
ggmap(map, fullpage = T) + geom_point(data=df, aes(x=long, y=lat, size=mag), alpha=0.5)
map <- get_googlemap(center = cen, scale = 1, maptype = 'roadmap', zoom = 5)
ggmap(map, fullpage = T) + geom_point(data=df, aes(x=long, y=lat, size=mag), alpha=0.5)
